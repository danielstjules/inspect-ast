// Allowed ESTree keys for the various node types,
// spanning es5 through es2017 specs
module.exports = {
  // es5
  Identifier: ['name'],
  Literal: ['value'],
  RegExpLiteral: ['value'],
  Program: ['body'],
  Function: ['id', 'params', 'body'],
  ExpressionStatement: ['expression'],
  BlockStatement: ['body'],
  EmptyStatement: [],
  DebuggerStatement: [],
  WithStatement: ['object', 'body'],
  ReturnStatement: ['argument'],
  LabeledStatement: ['label', 'body'],
  BreakStatement: ['label'],
  ContinueStatement: ['label'],
  IfStatement: ['test', 'consequent', 'alternate'],
  SwitchStatement: ['discriminant', 'cases'],
  SwitchCase: ['test', 'consequent'],
  ThrowStatement: ['argument'],
  TryStatement: ['block', 'handler', 'finalizer'],
  CatchClause: ['param', 'body'],
  WhileStatement: ['test', 'body'],
  DoWhileStatement: ['body', 'test'],
  ForStatement: ['init', 'test', 'update', 'body'],
  ForInStatement: ['left', 'right', 'body'],
  FunctionDeclaration: ['id', 'params', 'body'],
  VariableDeclaration: ['declarations'],
  VariableDeclarator: ['id', 'init'],
  ThisExpression: [],
  ArrayExpression: ['elements'],
  ObjectExpression: ['properties'],
  Property: ['key', 'value'],
  FunctionExpression: ['id', 'params', 'body'],
  UnaryExpression: ['operator', 'argument'],
  UpdateExpression: ['operator', 'argument'],
  BinaryExpression: ['left', 'operator', 'right'],
  AssignmentExpression: ['left', 'operator', 'right'],
  LogicalExpression: ['left', 'operator', 'right'],
  MemberExpression: ['object', 'property'],
  ConditionalExpression: ['test', 'alternate', 'consequent'],
  CallExpression: ['callee', 'arguments'],
  NewExpression: ['callee', 'arguments'],
  SequenceExpression: ['expressions'],

  // es2015
  ForOfStatement: ['left', 'right', 'body'],
  Super: [],
  SpreadElement: ['argument'],
  ArrowFunctionExpression: ['id', 'params', 'body'],
  YieldExpression: ['argument'],
  TemplateLiteral: ['quasis', 'expressions'],
  TaggedTemplateExpression: ['tag', 'quasi'],
  TemplateElement: ['value'],
  AssignmentProperty: ['key', 'value'],
  ObjectPattern: ['properties'],
  ArrayPattern: ['elements'],
  RestElement: ['argument'],
  AssignmentPattern: ['left', 'right'],
  Class: ['id', 'superClass', 'body'],
  ClassBody: ['body'],
  MethodDefinition: ['key', 'value'],
  ClassDeclaration: ['id', 'superClass', 'body'],
  ClassExpression: ['id', 'superClass', 'body'],
  MetaProperty: ['meta', 'property'],
  ModuleDeclaration: [],
  ModuleSpecifier: ['local'],
  ImportDeclaration: ['specifiers', 'source'],
  ImportSpecifier: ['local', 'imported'],
  ImportDefaultSpecifier: ['local'],
  ImportNamespaceSpecifier: ['local'],
  ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
  ExportSpecifier: ['local', 'exported'],
  ExportDefaultDeclaration: ['declaration'],
  ExportAllDeclaration: ['source'],

  // es2017
  AwaitExpression: ['argument'],

  // Experimental & Babel
  File: ['program'],
  RegExpLiteral: ['pattern', 'flags'],
  NullLiteral: [],
  StringLiteral: ['value'],
  BooleanLiteral: ['value'],
  ObjectProperty: ['value', 'decorators'],
  ObjectMethod: ['value', 'decorators'],
  NumericLiteral: ['value'],
  ClassMethod: ['key', 'value', 'body', 'decorators'],
  ClassProperty: ['key', 'value'],
  Decorator: ['expression'],
  Directive: ['value'],
  DirectiveLiteral: ['value'],
  ForAwaitStatement: ['left', 'right', 'body'],
  RestProperty: ['argument'],
  SpreadProperty: ['argument']
};
